package tn.esprit.clubsync.Services;

import org.springframework.ai.chat.client.ChatClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import tn.esprit.clubsync.Repo.ClubRepo;
import tn.esprit.clubsync.entities.Club;
import org.apache.commons.text.similarity.LevenshteinDistance;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.time.LocalDate;
import java.time.Month;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
public class ChatServiceImpl implements ChatService {

    private final ChatClient chatClient;

    @Autowired
    private ClubRepo clubRepo;

    // Patterns for common question types
    private static final Pattern INFORMATION_PATTERN = Pattern.compile("(?:qu[e'](?:st-ce que|s-ce|l est)|c'est quoi|info|parle[rz]?\\s+(?:de|du|des)|dis[\\s-]moi|explique[rz]?|information|pr√©sente[rz]?|raconte[rz]?).*");
    private static final Pattern LISTING_PATTERN = Pattern.compile("(?:liste[rz]?|√©num√®re[rz]?|montre[rz]?|affiche[rz]?|donner?\\s+la\\s+liste|quels?\\s+sont|y\\s+a[\\s-]t[\\s-]il|existe[\\s-]t[\\s-]il).*");
    private static final Pattern RECOMMENDATION_PATTERN = Pattern.compile("(?:recommend|sugg√®re[rz]?|conseil[ls]e[rz]?|propose[rz]?|meilleur).*");
    private static final Pattern COMPARISON_PATTERN = Pattern.compile("(?:compare[rz]?|diff√©rence|versus|vs|ou).*");
    private static final Pattern GREETING_PATTERN = Pattern.compile("(?:bonjour|salut|hello|coucou|hey|hi|bonsoir|comment\\s+√ßa\\s+va).*");

    public ChatServiceImpl(ChatClient.Builder builder) {
        this.chatClient = builder.build();
    }

    @Override
    public String ask(String prompt) {
        if (prompt == null || prompt.trim().isEmpty()) {
            return "Bonjour ! Je suis le chatbot de ClubSync. Comment puis-je vous aider concernant nos clubs ?";
        }

        String cleanPrompt = prompt.trim();
        String lowerPrompt = cleanPrompt.toLowerCase();

        // Handle greetings specifically
        if (GREETING_PATTERN.matcher(lowerPrompt).matches() && lowerPrompt.split("\\s+").length <= 5) {
            return handleGreeting(lowerPrompt);
        }

        // Check if the question is about clubs
        if (containsClubRelatedTerms(lowerPrompt)) {
            // Handle general questions about the ClubSync platform
            if (isAboutClubSyncPlatform(lowerPrompt)) {
                return handleClubSyncPlatformQuestion(lowerPrompt);
            }

            // Handle listing requests (all clubs or by category)
            if (LISTING_PATTERN.matcher(lowerPrompt).matches() || lowerPrompt.contains("liste")) {
                // Check if requesting all clubs
                if (isAskingForAllClubs(lowerPrompt)) {
                    return listAllClubs();
                }

                // Check for category-based club requests
                String category = extractCategory(lowerPrompt);
                if (category != null) {
                    List<Club> clubsInCategory = clubRepo.findByCategorieIgnoreCase(category);
                    if (clubsInCategory.isEmpty()) {
                        return "Aucun club trouv√© dans la cat√©gorie " + category + ". Voulez-vous voir la liste de tous nos clubs ?";
                    } else {
                        return formatClubsInCategory(clubsInCategory, category);
                    }
                }
            }

            // Handle recommendations
            if (RECOMMENDATION_PATTERN.matcher(lowerPrompt).matches()) {
                String category = extractCategory(lowerPrompt);
                if (category != null) {
                    return recommendClubsInCategory(category);
                } else {
                    return recommendPopularClubs();
                }
            }

            // Check for specific club information
            String clubName = extractClubName(prompt);
            if (clubName != null && !clubName.isEmpty()) {
                return handleSpecificClubQuery(clubName, lowerPrompt);
            }

            // If we reached here, it's a club-related question but we couldn't determine specifics
            return "Je comprends que vous vous int√©ressez √† nos clubs, mais je n'ai pas saisi pr√©cis√©ment votre demande. Voulez-vous des informations sur un club sp√©cifique, voir la liste des clubs par cat√©gorie, ou avoir des recommandations ?";
        } else {
            // For non-club related questions, return a polite message with guidance
            return "Je suis d√©sol√©, je suis sp√©cialis√© dans les informations concernant les clubs de ClubSync. Pour toute autre question, merci de contacter notre √©quipe support. Puis-je vous aider √† d√©couvrir nos clubs ou √† trouver des informations sur un club sp√©cifique ?";
        }
    }

    private String handleGreeting(String lowerPrompt) {
        if (lowerPrompt.contains("va") || lowerPrompt.contains("√ßa va")) {
            return "Bonjour ! Je vais tr√®s bien, merci de demander. Je suis le chatbot de ClubSync, pr√™t √† vous aider avec toutes vos questions concernant nos clubs. Que souhaitez-vous savoir ?";
        }
        return "Bonjour ! Je suis le chatbot de ClubSync. Je peux vous renseigner sur nos diff√©rents clubs, leurs activit√©s, ou vous aider √† trouver un club qui correspond √† vos centres d'int√©r√™t. Comment puis-je vous aider aujourd'hui ?";
    }

    private boolean isAboutClubSyncPlatform(String lowerPrompt) {
        List<String> platformTerms = Arrays.asList(
                "clubsync", "plateforme", "application", "site", "service", "fonctionnement", "fonctionne",
                "comment utiliser", "comment √ßa marche", "comment s'inscrire", "inscription", "adh√©sion"
        );
        return platformTerms.stream().anyMatch(lowerPrompt::contains);
    }

    private String handleClubSyncPlatformQuestion(String lowerPrompt) {
        if (lowerPrompt.contains("inscription") || lowerPrompt.contains("adh√©sion") || lowerPrompt.contains("s'inscrire") || lowerPrompt.contains("rejoindre")) {
            return "Pour vous inscrire √† un club sur ClubSync, c'est tr√®s simple :\n\n" +
                    "1. Cr√©ez un compte sur notre plateforme ou connectez-vous\n" +
                    "2. Parcourez notre catalogue de clubs\n" +
                    "3. Visitez la page du club qui vous int√©resse\n" +
                    "4. Cliquez sur le bouton \"Rejoindre le club\"\n" +
                    "5. Suivez les instructions pour compl√©ter votre adh√©sion\n\n" +
                    "Certains clubs peuvent avoir des crit√®res d'admission sp√©cifiques ou des frais d'adh√©sion. Ces informations sont d√©taill√©es sur la page de chaque club.";
        } else if (lowerPrompt.contains("fonctionnement") || lowerPrompt.contains("fonctionne") || lowerPrompt.contains("comment √ßa marche")) {
            return "ClubSync est une plateforme qui centralise tous les clubs de l'√©tablissement. Voici comment √ßa fonctionne :\n\n" +
                    "‚Ä¢ Parcourez les clubs par cat√©gorie ou recherchez un club sp√©cifique\n" +
                    "‚Ä¢ Consultez les d√©tails de chaque club (description, activit√©s, membres, √©v√©nements)\n" +
                    "‚Ä¢ Rejoignez les clubs qui vous int√©ressent\n" +
                    "‚Ä¢ Participez aux √©v√©nements et activit√©s\n" +
                    "‚Ä¢ Communiquez avec les autres membres\n\n" +
                    "ClubSync facilite la gestion des clubs et rend l'information accessible √† tous les √©tudiants.";
        } else {
            return "ClubSync est la plateforme officielle de gestion des clubs de notre √©tablissement. Elle permet de :\n\n" +
                    "‚Ä¢ D√©couvrir tous les clubs disponibles\n" +
                    "‚Ä¢ Consulter leurs activit√©s et √©v√©nements\n" +
                    "‚Ä¢ Rejoindre facilement un club\n" +
                    "‚Ä¢ Rester inform√© des actualit√©s\n\n" +
                    "Que souhaitez-vous savoir de plus sur ClubSync ou nos clubs ?";
        }
    }

    private boolean isAskingForAllClubs(String lowerPrompt) {
        List<String> allClubsTerms = Arrays.asList(
                "tous les clubs", "toutes les associations", "liste compl√®te", "liste des clubs",
                "ensemble des clubs", "tous les", "toutes les", "tous vos clubs", "toutes vos associations"
        );
        return allClubsTerms.stream().anyMatch(lowerPrompt::contains);
    }

    private String listAllClubs() {
        List<Club> allClubs = clubRepo.findAll();
        if (allClubs.isEmpty()) {
            return "Aucun club n'est actuellement enregistr√© dans notre syst√®me.";
        }

        // Group clubs by category
        Map<String, List<Club>> clubsByCategory = new HashMap<>();
        for (Club club : allClubs) {
            String category = club.getCategorie() != null ? club.getCategorie() : "Autre";
            clubsByCategory.computeIfAbsent(category, k -> new ArrayList<>()).add(club);
        }

        StringBuilder response = new StringBuilder();
        response.append("üìã **Liste compl√®te de nos clubs** üìã\n\n");

        clubsByCategory.forEach((category, clubs) -> {
            response.append(getCategoryIcon(category)).append(" **").append(category.toUpperCase()).append("** (").append(clubs.size()).append(")\n");
            clubs.forEach(club -> {
                response.append("   ‚Ä¢ ").append(club.getName()).append("\n");
            });
            response.append("\n");
        });

        response.append("Pour plus de d√©tails sur un club sp√©cifique, demandez-moi des informations sur le club qui vous int√©resse.");
        return response.toString();
    }

    private String recommendClubsInCategory(String category) {
        List<Club> clubsInCategory = clubRepo.findByCategorieIgnoreCase(category);
        if (clubsInCategory.isEmpty()) {
            return "Je n'ai pas de clubs √† recommander dans la cat√©gorie " + category + " car aucun n'est enregistr√©. Voulez-vous explorer une autre cat√©gorie ?";
        }

        // Sort by some criteria (e.g., number of members as a proxy for popularity)
        clubsInCategory.sort((c1, c2) -> c2.getMembers().size() - c1.getMembers().size());

        // Take top 3 or fewer if less than 3 available
        List<Club> recommendedClubs = clubsInCategory.subList(0, Math.min(3, clubsInCategory.size()));

        StringBuilder response = new StringBuilder();
        response.append("üåü **Clubs recommand√©s en ").append(category.toUpperCase()).append("** üåü\n\n");

        for (int i = 0; i < recommendedClubs.size(); i++) {
            Club club = recommendedClubs.get(i);
            response.append((i + 1)).append(". **").append(club.getName()).append("**\n")
                    .append("   _\"").append(club.getSlogan()).append("\"_\n")
                    .append("   üë• ").append(club.getMembers().size()).append(" membres\n")
                    .append("   üìù ").append(truncateDescription(club.getDescription(), 100)).append("\n\n");
        }

        response.append("Ces clubs sont particuli√®rement actifs et populaires. Pour rejoindre l'un d'entre eux ou en savoir plus, demandez-moi des d√©tails sur celui qui vous int√©resse !");
        return response.toString();
    }

    private String recommendPopularClubs() {
        List<Club> allClubs = clubRepo.findAll();
        if (allClubs.isEmpty()) {
            return "Aucun club n'est actuellement enregistr√© dans notre syst√®me pour vous faire des recommandations.";
        }

        // Sort by number of members (popularity)
        allClubs.sort((c1, c2) -> c2.getMembers().size() - c1.getMembers().size());

        // Take top 3 or fewer if less than 3 available
        List<Club> popularClubs = allClubs.subList(0, Math.min(3, allClubs.size()));

        StringBuilder response = new StringBuilder();
        response.append("üèÜ **Clubs les plus populaires** üèÜ\n\n");

        for (int i = 0; i < popularClubs.size(); i++) {
            Club club = popularClubs.get(i);
            response.append((i + 1)).append(". **").append(club.getName()).append("** (").append(club.getCategorie()).append(")\n")
                    .append("   _\"").append(club.getSlogan()).append("\"_\n")
                    .append("   üë• ").append(club.getMembers().size()).append(" membres\n")
                    .append("   üìù ").append(truncateDescription(club.getDescription(), 100)).append("\n\n");
        }

        response.append("Ces clubs sont nos plus populaires en ce moment. Vous pouvez me demander plus de d√©tails sur celui qui vous int√©resse !");
        return response.toString();
    }

    private String handleSpecificClubQuery(String clubName, String lowerPrompt) {
        Optional<Club> optionalClub = clubRepo.findByNameContainingIgnoreCase(clubName);
        if (optionalClub.isPresent()) {
            Club club = optionalClub.get();

            // Extract information type from query
            if (lowerPrompt.contains("description") || lowerPrompt.contains("objectif") || lowerPrompt.contains("pr√©sentation") ||
                    lowerPrompt.contains("c'est quoi") || lowerPrompt.contains("parle") || INFORMATION_PATTERN.matcher(lowerPrompt).matches()) {
                return "üìö **Description du club " + club.getName() + "**\n\n"
                        + club.getDescription() + "\n\nüí° *Slogan* : \"" + club.getSlogan() + "\"";
            }
            if (lowerPrompt.contains("slogan") || lowerPrompt.contains("devise") || lowerPrompt.contains("phrase")) {
                return "üí´ **Slogan du club " + club.getName() + "**\n\n¬´ "
                        + club.getSlogan() + " ¬ª\n\n_" + club.getDescription() + "_";
            }
            if (lowerPrompt.contains("cat√©gorie") || lowerPrompt.contains("type") || lowerPrompt.contains("domaine")) {
                return "üè∑Ô∏è **Cat√©gorie du club " + club.getName() + "**\n\n"
                        + club.getCategorie() + "\n\nüí° *Description* : " + club.getDescription();
            }
            if (lowerPrompt.contains("membres") || lowerPrompt.contains("combien") || lowerPrompt.contains("nombre") ||
                    lowerPrompt.contains("participant") || lowerPrompt.contains("adh√©rent")) {
                return "üë• **Membres du club " + club.getName() + "**\n\n"
                        + club.getMembers().size() + " membres actifs\n\n‚ú® *Slogan* : \"" + club.getSlogan() + "\"";
            }
            if (lowerPrompt.contains("cr√©ateur") || lowerPrompt.contains("fondateur") || lowerPrompt.contains("pr√©sident") ||
                    lowerPrompt.contains("responsable") || lowerPrompt.contains("qui a cr√©√©")) {
                return club.getCreator() != null ?
                        "üë§ **Cr√©ateur du club " + club.getName() + "**\n\n"
                                + club.getCreator().getFirstname() + " " + club.getCreator().getLastname()
                                + "\n\nüèÜ *Cat√©gorie* : " + club.getCategorie() :
                        "‚ùå **Cr√©ateur non renseign√©**\n\nLe club " + club.getName() + " n'a pas de cr√©ateur enregistr√©.";
            }
            if (lowerPrompt.contains("rejoindre") || lowerPrompt.contains("inscription") || lowerPrompt.contains("adh√©sion") ||
                    lowerPrompt.contains("adh√©rer") || lowerPrompt.contains("comment s'inscrire")) {
                return "üìù **Comment rejoindre le club " + club.getName() + "**\n\n"
                        + "Pour rejoindre ce club, suivez ces √©tapes :\n\n"
                        + "1. Connectez-vous √† votre compte ClubSync\n"
                        + "2. Visitez la page du club " + club.getName() + "\n"
                        + "3. Cliquez sur le bouton \"Rejoindre\"\n"
                        + "4. Suivez les instructions compl√©mentaires\n\n"
                        + "üë• Le club compte actuellement " + club.getMembers().size() + " membres\n\n"
                        + "Pour toute question sp√©cifique, vous pouvez contacter directement les responsables du club.";
            }

            // Default: Return full club details
            return formatClubDetails(club);
        } else {
            // Suggest similar club names if no exact match
            List<Club> allClubs = clubRepo.findAll();
            String suggestedName = null;
            int bestDistance = Integer.MAX_VALUE;
            LevenshteinDistance ld = new LevenshteinDistance();

            for (Club c : allClubs) {
                int distance = ld.apply(clubName.toLowerCase(), c.getName().toLowerCase());
                if (distance < bestDistance) {
                    bestDistance = distance;
                    suggestedName = c.getName();
                }
            }

            if (suggestedName != null && bestDistance <= 3) {
                return "Je n'ai pas trouv√© de club nomm√© \"" + clubName + "\". Vouliez-vous dire : **" + suggestedName + "** ?";
            } else {
                return "Je n'ai pas trouv√© de club nomm√© \"" + clubName + "\". Vous pouvez consulter la liste de tous nos clubs en me demandant \"liste des clubs\".";
            }
        }
    }

    // Helper method to check if the prompt contains club-related terms
    private boolean containsClubRelatedTerms(String lowerPrompt) {
        List<String> clubTerms = Arrays.asList(
                "club", "association", "groupe", "organisation", "√©quipe",
                "adh√©rent", "membre", "inscription", "rejoindre", "adh√©sion",
                "activit√©", "√©v√©nement", "r√©union", "rencontre", "session",
                "sport", "art", "culture", "musique", "technologie", "science", "litt√©rature",
                "pr√©sident", "secr√©taire", "tr√©sorier", "responsable", "animateur", "cr√©ateur", "fondateur",
                "clubsync", "participer", "s'inscrire", "adh√©rer"
        );

        return clubTerms.stream().anyMatch(lowerPrompt::contains);
    }

    // Helper method to extract category from the prompt
    private String extractCategory(String lowerPrompt) {
        List<String> categories = Arrays.asList("sport", "art", "culture", "musique", "technologie", "science", "litt√©rature", "autre");
        LevenshteinDistance levenshtein = new LevenshteinDistance();
        String bestMatch = null;
        int minDistance = Integer.MAX_VALUE;

        for (String category : categories) {
            if (lowerPrompt.contains(category)) {
                return category; // Exact match
            }
            // Check for approximate match using Levenshtein distance
            int distance = levenshtein.apply(lowerPrompt, category);
            if (distance < minDistance) {
                minDistance = distance;
                bestMatch = category;
            }
        }

        // Threshold for typo tolerance (adjust as needed)
        return (minDistance <= 2) ? bestMatch : null;
    }

    private String truncateDescription(String description, int maxLength) {
        if (description == null) return "Description non disponible";
        if (description.length() <= maxLength) return description;

        return description.substring(0, maxLength - 3)
                + "..."
                + (description.charAt(maxLength - 3) != ' ' ? " " : "");
    }

    private String getCategoryIcon(String category) {
        return switch (category.toLowerCase()) {
            case "sport" -> "‚öΩ";
            case "musique" -> "üéµ";
            case "technologie" -> "üíª";
            case "science" -> "üî¨";
            case "art" -> "üé®";
            case "litt√©rature" -> "üìö";
            case "culture" -> "üé≠";
            default -> "üîç";
        };
    }

    private String extractClubName(String prompt) {
        String promptLower = prompt.toLowerCase().replaceAll("[^a-z0-9√©√®√†√π√¢√™√Æ√¥√ª√§√´√Ø√∂√º√ß]", " ");
        List<Club> allClubs = clubRepo.findAll();

        // Enhanced search logic
        Map<Club, Integer> matches = new LinkedHashMap<>();

        for (Club club : allClubs) {
            String cleanClubName = club.getName()
                    .toLowerCase()
                    .replaceAll("[^a-z0-9√©√®√†√π√¢√™√Æ√¥√ª√§√´√Ø√∂√º√ß]", " ")
                    .trim();

            // Multi-criteria verification
            int score = 0;

            // 1. Exact match
            if ((" " + promptLower + " ").contains(" " + cleanClubName + " ")) {
                score += 100;
            }

            // 2. Levenshtein similarity
            LevenshteinDistance ld = new LevenshteinDistance();
            int distance = ld.apply(promptLower, cleanClubName);
            score += (30 - Math.min(distance, 30)); // Max score 30 for distance 0

            // 3. Common keywords
            Set<String> promptWords = new HashSet<>(Arrays.asList(promptLower.split(" ")));
            Set<String> clubWords = new HashSet<>(Arrays.asList(cleanClubName.split(" ")));
            clubWords.retainAll(promptWords);
            score += clubWords.size() * 20;

            // 4. Pattern-based search for club name preceded by "club" or similar words
            Pattern clubNamePattern = Pattern.compile("(?:club|association)\\s+([\\w\\s]+)");
            Matcher matcher = clubNamePattern.matcher(promptLower);
            if (matcher.find()) {
                String extractedName = matcher.group(1).trim();
                if (cleanClubName.contains(extractedName) || extractedName.contains(cleanClubName)) {
                    score += 50;
                }
            }

            matches.put(club, score);
        }

        // Find best match
        return matches.entrySet().stream()
                .max(Map.Entry.comparingByValue())
                .filter(e -> e.getValue() > 40) // Minimum confidence threshold
                .map(e -> e.getKey().getName())
                .orElse(null);
    }

    private String formatClubsInCategory(List<Club> clubs, String category) {
        if (clubs.isEmpty()) {
            return "Aucun club trouv√© dans la cat√©gorie " + category + " üßê\n\nEssayez une autre cat√©gorie !";
        }

        StringBuilder sb = new StringBuilder();
        sb.append(getCategoryIcon(category)).append(" **Clubs de ").append(category.toUpperCase()).append("** ").append(getCategoryIcon(category)).append("\n\n");

        clubs.forEach(club -> {
            sb.append("üîπ **").append(club.getName()).append("** (").append(club.getMembers().size()).append(" membres)\n")
                    .append("   _\"").append(club.getSlogan()).append("\"_\n")
                    .append("   üìå ").append(truncateDescription(club.getDescription(), 100)).append("\n\n");
        });

        sb.append("üëâ Pour plus de d√©tails sur un club sp√©cifique, demandez-moi des informations sur le club qui vous int√©resse !");
        return sb.toString();
    }

    private String formatClubDetails(Club club) {
        StringBuilder sb = new StringBuilder();
        sb.append("üéØ **").append(club.getName()).append("**\n\n");
        sb.append("üìù *Description* :\n").append(club.getDescription()).append("\n\n");
        sb.append("üè∑Ô∏è *Cat√©gorie* : ").append(getCategoryIcon(club.getCategorie())).append(" ").append(club.getCategorie()).append("\n");
        sb.append("üí¨ *Slogan* : \"").append(club.getSlogan()).append("\"\n");
        sb.append("üë• *Membres* : ").append(club.getMembers().size()).append(" participants\n");
        if (club.getCreator() != null) {
            sb.append("üë§ *Cr√©ateur* : ").append(club.getCreator().getFirstname()).append(" ")
                    .append(club.getCreator().getLastname()).append("\n");
        }
        sb.append("\n‚ÑπÔ∏è Pour rejoindre ce club ou obtenir plus d'informations, connectez-vous √† l'application ClubSync ou contactez directement les responsables du club.");
        return sb.toString();
    }

    @Override
    public String processFileUpload(MultipartFile file) {
        try {
            // V√©rifier si le fichier est vide
            if (file.isEmpty()) {
                return "Fichier vide";
            }

            // Cr√©er le r√©pertoire d'upload s'il n'existe pas
            String uploadDir = "uploads";
            File directory = new File(uploadDir);
            if (!directory.exists()) {
                directory.mkdirs();
            }

            // Sauvegarder le fichier
            String fileName = file.getOriginalFilename();
            String contentType = file.getContentType();
            Path path = Paths.get(uploadDir + File.separator + fileName);
            Files.copy(file.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);

            // Traitement selon le type de fichier
            if (fileName != null) {
                String lowerFileName = fileName.toLowerCase();

                // Traitement des PDFs
                if (lowerFileName.endsWith(".pdf")) {
                    if (lowerFileName.contains("club") || lowerFileName.contains("association")) {
                        return "üìÑ Fichier PDF \"" + fileName + "\" upload√© avec succ√®s! Si ce document contient des informations sur les clubs, je pourrai l'analyser pour vous aider.";
                    } else {
                        return "üìÑ Fichier PDF \"" + fileName + "\" upload√© avec succ√®s! Notez que je suis sp√©cialis√© dans les informations sur les clubs. Si vous avez des questions √† ce sujet, n'h√©sitez pas √† me demander.";
                    }
                }

                // Traitement des images
                else if (contentType != null && contentType.startsWith("image/")) {
                    // D√©terminer le type d'image
                    String imageType = contentType.substring(6); // apr√®s "image/"
                    if (lowerFileName.contains("club") || lowerFileName.contains("event") || lowerFileName.contains("activit√©")) {
                        return "üñºÔ∏è Image \"" + fileName + "\" (" + imageType + ") upload√©e avec succ√®s! Si elle contient des informations sur les clubs ou leurs √©v√©nements, je ferai de mon mieux pour vous aider.";
                    } else {
                        return "üñºÔ∏è Image \"" + fileName + "\" (" + imageType + ") upload√©e avec succ√®s! Pour des questions relatives aux clubs, n'h√©sitez pas √† me demander.";
                    }
                }

                // Documents Word ou autres
                else if (lowerFileName.endsWith(".doc") || lowerFileName.endsWith(".docx")) {
                    return "üìù Document \"" + fileName + "\" upload√© avec succ√®s! S'il contient des informations sur les clubs, n'h√©sitez pas √† me poser des questions sp√©cifiques.";
                }
            }

            // ≈íufs de P√¢ques et autres logiques sp√©ciales
            if (fileName != null &&
                    (fileName.toLowerCase().contains("easter") ||
                            fileName.toLowerCase().contains("paques") ||
                            fileName.toLowerCase().contains("p√¢ques"))) {
                return "üê∞ Fichier secret d√©couvert! ü•ö Joyeuses P√¢ques! Le fichier \"" + fileName + "\" a √©t√© upload√© avec succ√®s.";
            }

            LocalDate today = LocalDate.now();
            if (today.getMonth() == Month.APRIL && today.getDayOfMonth() == 1) {
                return "Fichier \"" + fileName + "\" upload√© avec succ√®s! üé≠ C'est un jour sp√©cial aujourd'hui, non ? üòâ";
            } else if (today.getMonth() == Month.APRIL) {
                return "Fichier \"" + fileName + "\" upload√© avec succ√®s! ü•ö";
            }

            // R√©ponse par d√©faut
            return "‚úÖ Fichier \"" + fileName + "\" upload√© avec succ√®s! Si vous avez des questions concernant les clubs, je suis √† votre disposition.";
        } catch (Exception e) {
            return "‚ùå Erreur lors du traitement du fichier: " + e.getMessage();
        }
    }
}